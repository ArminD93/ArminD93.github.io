<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Convolutional network testing for image classification on Armin&#39;s portfolio</title>
    <link>https://armind93.github.io/posts/imageclassproject/pytorchversion/</link>
    <description>Recent content in Convolutional network testing for image classification on Armin&#39;s portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://armind93.github.io/posts/imageclassproject/pytorchversion/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Convolutional neural network</title>
      <link>https://armind93.github.io/posts/imageclassproject/pytorchversion/pytorch_cnn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://armind93.github.io/posts/imageclassproject/pytorchversion/pytorch_cnn/</guid>
      <description>8. Creating neural network class ConvNet(nn.Module): def __init__(self): super(ConvNet, self).__init__() self.conv1 = nn.Conv2d( in_channels=3, out_channels=12, kernel_size=5, stride=1 ) self.pool1 = nn.MaxPool2d(2, 2) # 2x2 - kernel size, 2 - stride self.conv2 = nn.Conv2d( in_channels=12, out_channels=20, kernel_size=3, stride=1 ) self.pool2 = nn.MaxPool2d(2, 2) self.conv3 = nn.Conv2d( in_channels=20, out_channels=32, kernel_size=3, stride=1 ) self.pool3 = nn.MaxPool2d(2, 2) self.fc1 = nn.Linear(32 * 16 * 16, 120) # input size - 16*7*7, output size - 120 self.</description>
    </item>
    
    <item>
      <title>Data preparing</title>
      <link>https://armind93.github.io/posts/imageclassproject/pytorchversion/pytorch_data_preparing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://armind93.github.io/posts/imageclassproject/pytorchversion/pytorch_data_preparing/</guid>
      <description>1. Load kaggle json file from google.colab import files print(&amp;quot;Please upload laggle.json file.. \n&amp;quot;) upload = files.upload()  2. Downloading data from kaggle %%time !pip install -U -q kaggle !mkdir ~/.kaggle !cp ./kaggle.json ~/.kaggle/kaggle.json !chmod 600 ~/.kaggle/kaggle.json !kaggle datasets download -d puneet6060/intel-image-classification !unzip -o intel-image-classification.zip -d ./data  3. Folder settings !mv ./data/seg_train/seg_train/ ./data/train/ !mv ./data/seg_test/seg_test/ ./data/val/ !rm -r ./data/seg_train/ !rm -r ./data/seg_test/  4. Data tranforms mean = np.array([0.5, 0.</description>
    </item>
    
    <item>
      <title>pyTorch modules</title>
      <link>https://armind93.github.io/posts/imageclassproject/pytorchversion/pytorch_modules/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://armind93.github.io/posts/imageclassproject/pytorchversion/pytorch_modules/</guid>
      <description>link to data
link to GitHub Repository
1. Import modules import torch import torch.nn as nn import torch.nn.functional as F import torch.optim as optim from torch.optim import lr_scheduler import numpy as np import torchvision from torchvision import datasets, models, transforms from torchsummary import summary import matplotlib.pyplot as plt import time import os import copy # Device configuration device = torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;) # Assume that we are on a CUDA machine, then this should print a CUDA device: print(f&#39;Working on device={device}&#39;) torch.</description>
    </item>
    
  </channel>
</rss>